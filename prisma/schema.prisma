// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FuelLevel {
  RESERVA
  QUARTO
  METADE
  TRES_QUARTOS
  CHEIO
}

enum AdblueLevel {
  VAZIO
  BAIXO
  METADE
  CHEIO
}

enum TireStatus {
  RUIM
  REGULAR
  BOM
  NOVO
}

enum MirrorStatus {
  OK
  QUEBRADO
  RACHADO
  FALTANDO
}

enum PaintingStatus {
  INTACTA
  ARRANHADA
  AMASSADA
  REPARADA
}

enum ServiceStatus {
  AGUARDANDO
  EM_ANDAMENTO
  FINALIZADO
}



model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Client {
  id        String   @id @default(uuid())
  name      String
  cpf       String?  @unique
  cnpj      String?  @unique
  email     String   @unique
  phone     String
  address   String
  isExternal Boolean @default(true)
  createdAt DateTime @default(now())
  
  vehicles Vehicle[]
  notifications Notification[]
}

model Vehicle {
  id        String   @id @default(uuid())
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id])
  plate     String   @unique
  brand     String
  model     String
  year      Int
  createdAt DateTime @default(now())

  serviceOrders ServiceOrder[]
  appointments    Appointment[]
}

model ServiceOrder {
  id             String           @id @default(uuid())
  vehicleId      String
  vehicle        Vehicle          @relation(fields: [vehicleId], references: [id])
  fuelLevel      FuelLevel
  adblueLevel    AdblueLevel
  km             Int
  tireStatus     TireStatus
  mirrorStatus   MirrorStatus
  paintingStatus PaintingStatus
  complaints     String?
  notes          String?
  status         ServiceStatus    @default(AGUARDANDO)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  report         ServiceReport?
  photos        Photo[]
  notifications Notification[]

}

model ServiceReport {
  id          String        @id @default(uuid())
  orderId     String        @unique
  order       ServiceOrder  @relation(fields: [orderId], references: [id])
  description String
  createdAt   DateTime      @default(now())
}

model Photo {
  id         String        @id @default(uuid())
  orderId    String
  order      ServiceOrder  @relation(fields: [orderId], references: [id])
  filename   String
  path       String
  uploadedAt DateTime      @default(now())
}
enum AppointmentStatus {
  PENDENTE
  CONCLUIDO
}

model Appointment {
  id        String   @id @default(uuid())
  vehicleId String
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
  date      DateTime
  status    AppointmentStatus @default(PENDENTE)
  notes     String?
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id])
  orderId   String?   
  serviceOrder ServiceOrder? @relation(fields: [orderId], references: [id])
  message   String
  sent      Boolean  @default(false)
  createdAt DateTime @default(now())
}




